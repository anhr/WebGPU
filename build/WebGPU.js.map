{"version":3,"file":"WebGPU.js","sources":["../WebGPU.js"],"sourcesContent":["/**\r\n * @module WebGPU\r\n * @description [WebGPU]{@link https://gpuweb.github.io/gpuweb/}. GPU Compute on the web.\r\n * @see [Get started with GPU Compute on the web]{@link https://web.dev/gpu-compute/}\r\n *\r\n * @author [Andrej Hristoliubov]{@link https://github.com/anhr}\r\n *\r\n * @copyright 2011 Data Arts Team, Google Creative Lab\r\n *\r\n * @license under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n*/\r\n\r\n//import loadFile from '../../commonNodeJS/master/loadFileNodeJS/loadFile.js'\r\n\r\nclass WebGPU {\r\n\r\n\t/**\r\n\t * [WebGPU]{@link https://gpuweb.github.io/gpuweb/}. GPU Compute on the web.\r\n\t * @param {object} settings The following settings are available\r\n\t * @param {object} [settings.input] Input values for WebGPU. The following Input values are available:\r\n\t * @param {Array} [settings.input.matrices] Array of input matrices. See [Shader programming]{@link  https://web.dev/gpu-compute/#shader-programming}.\r\n\t * <pre>\r\n\t * Example:\r\n\t * <b>[\r\n\t *   [\r\n\t *      [1, 2, 3, 4],\r\n\t *      [5, 6, 7, 8]\r\n\t *   ],\r\n\t *   [\r\n\t *      [1, 2],\r\n\t *      [3, 4],\r\n\t *      [5, 6],\r\n\t *      [7, 8],\r\n\t *   \r\n\t *]</b>\r\n\t * </pre>\r\n\t * @param {object} [settings.input.params] The following input parameters types are available\r\n\t * @param {object} [settings.input.params.f32] <b>f32</b> type of [floating point literal]{@link https://gpuweb.github.io/gpuweb/wgsl/#floating-point-literal} list.\r\n\t * Every item of the list is <b>key: value</b> pair. <b>value</b> is any [Number]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number} value.\r\n\t * <pre>\r\n\t * Example:\r\n\t * <b>params: {\r\n\t *   f32: {\r\n\t *     c: 0.04,\r\n\t *     radius: 10\r\n\t *   },\r\n\t *},</b>\r\n\t * </pre>\r\n\t * @param {object} [settings.input.params.u32] <b>u32</b> type of [integer literal]{@link https://gpuweb.github.io/gpuweb/wgsl/#integer-literal} list.\r\n\t * Every item of the list is <b>key: value</b> pair. <b>value</b> is any unsigned integer [Number]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number} value.\r\n\t * <pre>\r\n\t * Example:\r\n\t * <b>params: {\r\n\t *   u32: {\r\n\t *     points: 40,\r\n\t *     count: 1000\r\n\t *   },\r\n\t *}</b>\r\n\t * </pre>\r\n\t * @param {Array} [settings.results] Array of descriptions of the output data.\r\n\t * <pre>\r\n\t * Example of <b>settings.results</b> array item:\r\n\t * <b>{\r\n\t *   count: 1000\r\n\t *   out: out => {\r\n\t *\r\n\t *     const aNear = WebGPU.out2Matrix(out, {\r\n\t *\r\n\t *       size: [\r\n\t *         l,\r\n\t *         aNearRowlength,\r\n\t *       ],\r\n\t *       type: Uint32Array,\r\n\t *\r\n\t *     });\r\n\t *     console.log('aNear:');\r\n\t *     console.log(aNear);\r\n\t *\r\n\t *   }\r\n\t *\r\n\t *}</b>\r\n\t * </pre>\r\n\t * The following descriptions have every <b>settings.results</b> item.\r\n\t * @param {Number} settings.results.count Count of output data array items.\r\n\t * @param {Function} settings.results.out <b>function(out)</b> called when output data is ready.\r\n\t * <pre>\r\n\t * <b>out</b> argument is array of output data. See [ArrayBuffer]{@link https://webidl.spec.whatwg.org/#idl-ArrayBuffer}.\r\n\t * </pre>\r\n\t * @param {Number} [settings.results.phase=0] You can divide GPU compute to phases.\r\n\t * <pre>\r\n\t * Please add <b>@group(0) @binding(4) var<uniform> phase : u32;</b> buffer into your [WGSL]{@link https://gpuweb.github.io/gpuweb/wgsl/} source code\r\n\t * if you want to divide GPU compute to phases.\r\n\t * See <a href=\"../../fermatSpiral/WebGPU/create.c\" target=\"_blank\">Shader.c</a> example of [WGSL]{@link https://gpuweb.github.io/gpuweb/wgsl/} source code, where computing was divided to phases.\r\n\t * Note, you can see the <b>switch (phase)</b> in the example, that divides computing to phases.\r\n\t * \r\n\t * Please define a phase, when current output data will be ready.\r\n\t * </pre>\r\n\t * @param {Array} [settings.workgroupCount=[1]] For dispatch work to be performed with the current GPUComputePipeline.\r\n\t * <pre>\r\n\t * See [dispatchWorkgroups]{@link https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroups} of [GPUComputePipeline]{@link https://gpuweb.github.io/gpuweb/#gpucomputepipeline}.\r\n\t * <b>workgroupCount[0]</b> is <b>workgroupCountX</b>\r\n\t * <b>workgroupCount[1]</b> is <b>workgroupCountY</b>\r\n\t * <b>workgroupCount[2]</b> is <b>workgroupCountZ</b>\r\n\t * </pre>\r\n\t * @param {USVString} [settings.shaderCode] The [WGSL]{@link https://gpuweb.github.io/gpuweb/wgsl/} source code for the shader module. See [USVString]{@link https://webidl.spec.whatwg.org/#idl-USVString}.\r\n\t * @param {String} [settings.shaderCodeFile] The name of the file with [WGSL]{@link https://gpuweb.github.io/gpuweb/wgsl/} source code.\r\n\t * Have effect only if the <b>shaderCode</b> undefined.\r\n\t * @param {Function} [settings.shaderCodeText] <b>function(text)</b> called after downloading of the shader code from file and before creating of the Shader Module.\r\n\t * See [createShaderModule(descriptor)]{@link https://gpuweb.github.io/gpuweb/#dom-gpudevice-createshadermodule}\r\n\t * <pre>\r\n\t * The <b>text</b> argument is text of the shader code. You can modify shader code and return new text.\r\n\t * Example:\r\n\t * <b>shaderCodeText: function (text) {\r\n\t *   return text.replace( '%debugCount', 1 );\r\n\t *},</b>\r\n\t * </pre>\r\n\t */\r\n\tconstructor(settings) {\r\n\r\n\t\tlet gpuDevice = null;\r\n\r\n\t\t//https://gpuweb.github.io/gpuweb/#initialization-examples\r\n\t\tasync function initializeWebGPU() {\r\n\r\n\t\t\t// Check to ensure the user agent supports WebGPU.\r\n\t\t\tif ( !WebGPU.isSupportWebGPU() )\r\n\t\t\t{\r\n\t\t\t\tconsole.error(\"WebGPU: User agent doesn't support WebGPU. WebGPU is available for now in Chrome Canary https://www.google.com/intl/ru/chrome/canary/ on desktop behind an experimental flag. You can enable it at chrome://flags/#enable-unsafe-webgpu. The API is constantly changing and currently unsafe. As GPU sandboxing isn't implemented yet for the WebGPU API, it is possible to read GPU data for other processes! Don't browse the web with it enabled.\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Request an adapter.\r\n\t\t\tconst gpuAdapter = await navigator.gpu.requestAdapter();\r\n\r\n\t\t\t// requestAdapter may resolve with null if no suitable adapters are found.\r\n\t\t\tif (!gpuAdapter) {\r\n\t\t\t\tconsole.error('No WebGPU adapters found.');\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Request a device.\r\n\t\t\t// Note that the promise will reject if invalid options are passed to the optional\r\n\t\t\t// dictionary. To avoid the promise rejecting always check any features and limits\r\n\t\t\t// against the adapters features and limits prior to calling requestDevice().\r\n\t\t\tgpuDevice = await gpuAdapter.requestDevice();\r\n\r\n\t\t\t// requestDevice will never return null, but if a valid device request can't be\r\n\t\t\t// fulfilled for some reason it may resolve to a device which has already been lost.\r\n\t\t\t// Additionally, devices can be lost at any time after creation for a variety of reasons\r\n\t\t\t// (ie: browser resource management, driver updates), so it's a good idea to always\r\n\t\t\t// handle lost devices gracefully.\r\n\t\t\tgpuDevice.lost.then((info) => {\r\n\t\t\t\tconsole.error(`WebGPU device was lost: ${info.message}`);\r\n\r\n\t\t\t\tgpuDevice = null;\r\n\r\n\t\t\t\t// Many causes for lost devices are transient, so applications should try getting a\r\n\t\t\t\t// new device once a previous one has been lost unless the loss was caused by the\r\n\t\t\t\t// application intentionally destroying the device. Note that any WebGPU resources\r\n\t\t\t\t// created with the previous device (buffers, textures, etc) will need to be\r\n\t\t\t\t// re-created with the new one.\r\n\t\t\t\tif (info.reason != 'destroyed') {\r\n\t\t\t\t\tinitializeWebGPU();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tonWebGPUInitialized();\r\n\r\n\t\t}\r\n\r\n\t\tfunction onWebGPUInitialized() {\r\n\r\n\t\t\tconst input = settings.input;\r\n\t\t\tlet bindGroupLayout, bindGroup;\r\n\t\t\tconst phase = { param: 0, max: 0 }\r\n\t\t\tif (input) {\r\n\r\n\t\t\t\tif (input.matrices)\r\n\t\t\t\t\tinput.matrices.forEach(inputMatrix => {\r\n\r\n\t\t\t\t\t\t//create matrix\r\n\t\t\t\t\t\tconst matrix = [\r\n\t\t\t\t\t\t\tinputMatrix.length,//rows\r\n\t\t\t\t\t\t\tinputMatrix[0].length,//columns\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t\tinputMatrix.forEach(row => row.forEach(value => matrix.push(value)));\r\n\t\t\t\t\t\tinputMatrix.matrix = new Float32Array(matrix);\r\n\r\n\t\t\t\t\t\tinputMatrix.gpuBuffer = gpuDevice.createBuffer({\r\n\t\t\t\t\t\t\tmappedAtCreation: true,\r\n\t\t\t\t\t\t\tsize: inputMatrix.matrix.byteLength,\r\n\t\t\t\t\t\t\tusage: GPUBufferUsage.STORAGE\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tnew Float32Array(inputMatrix.gpuBuffer.getMappedRange()).set(inputMatrix.matrix);\r\n\t\t\t\t\t\tinputMatrix.gpuBuffer.unmap();\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif (input.params) {\r\n\r\n\t\t\t\t\tfunction writeBuffer(item, type) {\r\n\r\n\t\t\t\t\t\tlet paramBufferSize = 0;\r\n\t\t\t\t\t\tconst data = [];\r\n\t\t\t\t\t\tObject.keys(item).forEach(key => {\r\n\r\n\t\t\t\t\t\t\tlet param = item[key];\r\n\t\t\t\t\t\t\tif (typeof param === \"number\") {\r\n\r\n\t\t\t\t\t\t\t\tfunction isInt(n) { return n % 1 === 0; }\r\n\t\t\t\t\t\t\t\tconst isInteger = isInt(param);\r\n\t\t\t\t\t\t\t\tif ((!isInteger && (type === Uint32Array))) {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.error('WebGPU: Invalid ' + key + ' = ' + param + ' parameter type. ' + (type === Uint32Array ? 'Integer' : 'Float') + ' is allowed only.');\r\n\t\t\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tparamBufferSize += type.BYTES_PER_ELEMENT;\r\n\t\t\t\t\t\t\t\tdata.push(param);\r\n\r\n\t\t\t\t\t\t\t} else console.error('WebGPU: Invalid param: ' + param);\r\n\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\titem.paramBuffer = gpuDevice.createBuffer({\r\n\r\n\t\t\t\t\t\t\tsize: paramBufferSize,\r\n\t\t\t\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tgpuDevice.queue.writeBuffer(\r\n\r\n\t\t\t\t\t\t\titem.paramBuffer,\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\tnew type(data)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\titem.data = data;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tObject.keys(input.params).forEach(key => {\r\n\r\n\t\t\t\t\t\tswitch(key){\r\n\r\n\t\t\t\t\t\t\tcase 'f32': writeBuffer(input.params[key], Float32Array); break;\r\n\t\t\t\t\t\t\tcase 'u32': writeBuffer(input.params[key], Uint32Array); break;\r\n\t\t\t\t\t\t\tdefault: console.error('WebGPU: Invalid input.params \"' + key + '\" key.');\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tsettings.results.forEach((result, i) => {\r\n\r\n\t\t\t\tif (!result.out) console.error('WebGPU: settings.results[' + i + '].out is undefined.');\r\n\t\t\t\telse if ((result.phase !== undefined) && (result.phase > phase.max)) phase.max = result.phase;\r\n\r\n\t\t\t});\r\n\t\t\tif (phase.max > 0) {\r\n\r\n\t\t\t\tphase.paramBuffer = gpuDevice.createBuffer({\r\n\r\n\t\t\t\t\tsize: Uint32Array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\tusage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\r\n\r\n\t\t\t\t});\r\n\t\t\t\tgpuDevice.queue.writeBuffer(\r\n\t\t\t\t\tphase.paramBuffer,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tnew Uint32Array([phase.param])\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Result Matrix\r\n\t\t\tif (settings.results)\r\n\t\t\t\tsettings.results.forEach(resultMatrix => {\r\n\r\n\t\t\t\t\tif (resultMatrix.type === undefined) resultMatrix.type = Float32Array;\r\n\t\t\t\t\tconst bufferSize = resultMatrix.type.BYTES_PER_ELEMENT * resultMatrix.count;\r\n\t\t\t\t\tif (!bufferSize) {\r\n\r\n\t\t\t\t\t\tconsole.error('WebGPU: \"count\" key is not defined in the settings.results item.');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( gpuDevice.limits.maxBufferSize < bufferSize ){\r\n\r\n\t\t\t\t\t\tconsole.error('WebGPU: GPUDevice buffer size = ' + bufferSize + ' is limited to ' + gpuDevice.limits.maxBufferSize );\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresultMatrix.buffer = gpuDevice.createBuffer({\r\n\t\r\n\t\t\t\t\t\tsize: bufferSize,\r\n\t\t\t\t\t\tusage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\r\n\t\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t});\r\n\r\n\t\t\t// Bind group layout and bind group\r\n\r\n\t\t\tconst entriesBindGroupLayout = [], entriesBindGroup = [];\r\n\t\t\tlet binding = 0;\r\n\t\t\tif (input) {\r\n\t\t\t\tif (input.matrices) for (var i = 0; i < input.matrices.length; i++) {\r\n\r\n\t\t\t\t\tentriesBindGroupLayout.push({\r\n\r\n\t\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\t\tvisibility: GPUShaderStage.COMPUTE,\r\n\t\t\t\t\t\tbuffer: { type: \"read-only-storage\" }\r\n\r\n\t\t\t\t\t});\r\n\t\t\t\t\tentriesBindGroup.push({\r\n\r\n\t\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\t\tresource: { buffer: input.matrices[i].gpuBuffer }\r\n\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbinding++;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif (input.params) {\r\n\r\n\t\t\t\t\tObject.keys(input.params).forEach(key => {\r\n\r\n\t\t\t\t\t\tswitch (key) {\r\n\r\n\t\t\t\t\t\t\tcase 'f32':\r\n\t\t\t\t\t\t\tcase 'u32':\r\n\t\t\t\t\t\t\t\tentriesBindGroupLayout.push({\r\n\r\n\t\t\t\t\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\t\t\t\t\tvisibility: GPUShaderStage.COMPUTE,\r\n\t\t\t\t\t\t\t\t\tbuffer: { type: \"uniform\" }\r\n\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tentriesBindGroup.push({\r\n\t\t\t\t\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\t\t\t\t\tresource: { buffer: input.params[key].paramBuffer, }\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tbinding++;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault: console.error('WebGPU: Invalid input.params \"' + key + '\" key.');\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (settings.results) settings.results.forEach(resultMatrix => {\r\n\t\t\t\t\r\n\t\t\t\tentriesBindGroupLayout.push({\r\n\t\r\n\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\tvisibility: GPUShaderStage.COMPUTE,\r\n\t\t\t\t\tbuffer: { type: \"storage\" }\r\n\t\r\n\t\t\t\t});\r\n\t\t\t\tentriesBindGroup.push({\r\n\t\r\n\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\tresource: { buffer: resultMatrix.buffer }\r\n\t\r\n\t\t\t\t});\r\n\t\t\t\tbinding++;\r\n\r\n\t\t\t});\r\n\r\n\t\t\tif ( phase.max > 0 ) {\r\n\t\t\t\t\r\n\t\t\t\tentriesBindGroupLayout.push({\r\n\t\t\t\t\r\n\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\tvisibility: GPUShaderStage.COMPUTE,\r\n\t\t\t\t\tbuffer: { type: \"uniform\" }\r\n\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\tentriesBindGroup.push({\r\n\t\t\t\t\tbinding: binding,\r\n\t\t\t\t\tresource: { buffer: phase.paramBuffer, }\r\n\t\t\t\t});\r\n\t\t\t\tbinding++;\r\n\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tbindGroupLayout = gpuDevice.createBindGroupLayout({ entries: entriesBindGroupLayout });\r\n\r\n\t\t\tbindGroup = gpuDevice.createBindGroup({\r\n\r\n\t\t\t\tlayout: bindGroupLayout,\r\n\t\t\t\tentries: entriesBindGroup\r\n\r\n\t\t\t});\r\n\r\n\t\t\t// Compute shader code\r\n\r\n\t\t\tconst shaderCode = settings.shaderCode;\r\n\t\t\t\r\n\t\t\tif (shaderCode)\r\n\t\t\t\tonLoad(shaderCode)\r\n\t\t\telse {\r\n\r\n//\t\t\t\tloadFile.async(settings.shaderCodeFile, { onload: function (shaderCode, url) { onLoad(shaderCode) } });\r\n\r\n\t\t\t\t//https://developer.mozilla.org/en-US/docs/Web/API/fetch\r\n\t\t\t\tfetch(settings.shaderCodeFile)\r\n\t\t\t\t\t.then((response) => {\r\n\t\t\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\t\t\tthrow new Error(`Load \"${response.url}\" ${response.statusText}. Status = ${response.status}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn response.text();\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.then((shaderCode) => {\r\n\t\t\t\t\t\tonLoad(shaderCode);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch((error) => {\r\n\t\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t}\r\n\t\t\tasync function onLoad(shaderCode) {\r\n\r\n\t\t\t\tif (settings.shaderCodeText) shaderCode = settings.shaderCodeText(shaderCode);\r\n\t\t\t\tconst shaderModule = gpuDevice.createShaderModule({ code: shaderCode });\r\n\r\n\t\t\t\t// Pipeline setup\r\n\r\n\t\t\t\tconst computePipeline = gpuDevice.createComputePipeline({\r\n\t\t\t\t\tlayout: gpuDevice.createPipelineLayout({\r\n\t\t\t\t\t\tbindGroupLayouts: [bindGroupLayout]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tcompute: {\r\n\t\t\t\t\t\tmodule: shaderModule,\r\n\t\t\t\t\t\tentryPoint: \"main\"\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// Commands submission\r\n\r\n\t\t\t\tfunction createCommandEncoder() {\r\n\r\n\t\t\t\t\t//https://gpuweb.github.io/gpuweb/#dom-gpudevice-createcommandencoder\r\n\t\t\t\t\tconst commandEncoder = gpuDevice.createCommandEncoder();\r\n\r\n\t\t\t\t\tconst passEncoder = commandEncoder.beginComputePass();\r\n\t\t\t\t\tpassEncoder.setPipeline(computePipeline);\r\n\t\t\t\t\tpassEncoder.setBindGroup(0, bindGroup);//set @group(0) in the shading code\r\n\r\n\t\t\t\t\tlet workgroupCount = [];\r\n\t\t\t\t\tif (input && input.matrices)\r\n\t\t\t\t\t\tinput.matrices.forEach((item, i) => workgroupCount.push(Math.ceil(item.matrix[i] / 8)));\r\n\t\t\t\t\telse {\r\n\r\n\t\t\t\t\t\tif (settings.workgroupCount) workgroupCount = settings.workgroupCount;\r\n\t\t\t\t\t\telse workgroupCount.push(1);\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst workgroupCountX = workgroupCount[0], workgroupCountY = workgroupCount[1], workgroupCountZ = workgroupCount[3];\r\n\r\n\t\t\t\t\t//https://gpuweb.github.io/gpuweb/#dom-gpucomputepassencoder-dispatchworkgroups\r\n\t\t\t\t\tpassEncoder.dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ);\r\n\t\t\t\t\tpassEncoder.end();\r\n\r\n\t\t\t\t\tif (settings.results)\r\n\t\t\t\t\t\tsettings.results.forEach(resultMatrix => {\r\n\r\n\t\t\t\t\t\t\t// Get a GPU buffer for reading in an unmapped state.\r\n\t\t\t\t\t\t\tresultMatrix.gpuReadBuffer = gpuDevice.createBuffer({\r\n\t\t\t\t\t\t\t\tsize: resultMatrix.buffer.size,\r\n\t\t\t\t\t\t\t\tusage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\t// Encode commands for copying buffer to buffer.\r\n\t\t\t\t\t\t\tcommandEncoder.copyBufferToBuffer(\r\n\t\t\t\t\t\t\t\tresultMatrix.buffer, // source buffer\r\n\t\t\t\t\t\t\t\t0, // source offset\r\n\t\t\t\t\t\t\t\tresultMatrix.gpuReadBuffer, // destination buffer\r\n\t\t\t\t\t\t\t\t0, // destination offset\r\n\t\t\t\t\t\t\t\tresultMatrix.buffer.size // size\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\treturn commandEncoder.finish();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Submit GPU commands.\r\n\t\t\t\tgpuDevice.queue.submit([createCommandEncoder()]);\r\n\r\n\t\t\t\t// Read buffer.\r\n\t\t\t\tif (settings.results) {\r\n\r\n\t\t\t\t\tasync function waitResult(i) {\r\n\r\n\t\t\t\t\t\tconst result = settings.results[i];\r\n\t\t\t\t\t\tif( !result.out ) {\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tconsole.error('WebGPU: settings.results[' + i + '].out is undefined.')\r\n\t\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ((result.phase || 0) !== phase.param) return;\r\n\t\t\t\t\t\tawait result.gpuReadBuffer.mapAsync(GPUMapMode.READ);\r\n\t\t\t\t\t\tresult.out(result.gpuReadBuffer.getMappedRange());\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile ( true ){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (let i = 0; i < settings.results.length; i++) await waitResult(i);\r\n\t\t\t\t\t\tphase.param++;\r\n\t\t\t\t\t\tif (phase.param > phase.max) break;\r\n\t\t\t\t\t\tgpuDevice.queue.writeBuffer(\r\n\t\r\n\t\t\t\t\t\t\tphase.paramBuffer,\r\n\t\t\t\t\t\t\t0,\r\n\t\t\t\t\t\t\tnew Uint32Array([phase.param])\r\n\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tgpuDevice.queue.submit([createCommandEncoder()]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tinitializeWebGPU();\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @returns true if your browser supports [WebGPU]{@link https://gpuweb.github.io/gpuweb/}.\r\n * WebGPU is available for now in [Chrome Canary]{@link https://www.google.com/intl/ru/chrome/canary/} on desktop behind an experimental flag.\r\n * You can enable it at <b>chrome://flags/#enable-unsafe-webgpu</b>.\r\n * The API is constantly changing and currently unsafe.\r\n * As GPU sandboxing isn't implemented yet for the WebGPU API, it is possible to read GPU data for other processes! Don't browse the web with it enabled.\r\n * */\r\nWebGPU.isSupportWebGPU = function () { return 'gpu' in navigator; }\r\n\r\n/**\r\n * Converts the <b>out</b> array to matrix.\r\n * @param {ArrayBuffer} out out [ArrayBuffer]{@link https://webidl.spec.whatwg.org/#idl-ArrayBuffer}. See <b>settings.out</b> param of <b>WebGPU</b> class for details.\r\n * @param {object} [settings={}] The following settings are available\r\n * @param {object} [settings.type=Float32Array] type of the <b>out</b> ArrayBuffer. Allowed <b>Float32Array</b> and <b>Uint32Array</b>.\r\n * @param {Array} [settings.size] size of result matrix.\r\n * <pre>\r\n * <b>size.length</b> is dimension of result matrix.\r\n * <b>size[0]</b> is first dimension.\r\n * ---\r\n * <b>size[i]</b> is next dimension.\r\n * ---\r\n * <b>size[size.length - 1]</b> is last dimension.\r\n * Esample:\r\n * <b>[\r\n *   10,//rows count\r\n *   2//columns count\r\n * ]\r\n * </b>\r\n * creates two dimesional matrix with 10 rows and 2 columns.\r\n * \r\n * If <b>size</b> is undefined, then dimension and size of result matrix must be defined in the header of the out:\r\n * First item of the out is dimension of result matrix.\r\n * Second item of the out is first dimension.\r\n * ---\r\n * Next item of the out is next dimension.\r\n * ---\r\n * dimension item of the out is last dimension.\r\n * Example:\r\n * <b>\r\n * const array = new Float32Array(out);\r\n * </b>\r\n * if\r\n * <b>\r\n * array[0] = 2//two dimesional matrix\r\n * array[1] = 10//rows count\r\n * array[2] = 2//columns count\r\n * </b>\r\n * then result matrix is two dimensional matrix with ten rows and two columns.\r\n * </pre>\r\n * @param {Function} [settings.push] <b>function(item)</b>. <b>item</b> - new matrix item.\r\n * Called when a new matrix item is ready. You can add a new item to your matrix.\r\n * The result matrix is empty if you have added <b>push</b> to the <b>setting</b> and <b>settings.returnMatrix</b> is not true.\r\n * @param {boolean} [settings.returnMatrix] true - result matrix is not empty. Has effect only if <b>settings.push</b> is defined.\r\n * @returns result matrix.\r\n */\r\nWebGPU.out2Matrix = function(out, settings={}) {\r\n\t\r\n\tconst array = settings.type ? new settings.type(out) : new Float32Array(out),\r\n\t\tmatrix = [];\r\n\tlet valueIndex,\r\n\t\tdimension;//Dimension of resultMatrix\r\n\tconst size = settings.size;\r\n\tif (size){\r\n\r\n\t\tdimension = size.length;\r\n\t\tvalueIndex = 0;\r\n\t\t\r\n\t} else {\r\n\t\t\r\n\t\tdimension = array[0];\r\n\t\tvalueIndex = dimension + 1;\r\n\r\n\t}\r\n\tfunction iteration (level, matrixLevel) {\r\n\r\n\t\tif (level > dimension) return;\r\n\t\tconst levelCount = size ? size[level -1] : array[level];\r\n\t\tfor (let i = 0; i < levelCount; i++){\r\n\r\n\t\t\tconst matrixNextLevel = [];\r\n\t\t\tif (level === (dimension - 1)) {\r\n\r\n\t\t\t\tconst length = size ? size[dimension - 1] : array[dimension];\r\n\t\t\t\tfor (let j = 0; j < length; j++) {\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (valueIndex >= array.length){\r\n\r\n\t\t\t\t\t\tconsole.error('WebGPU.out2Matrix: out of the index range of the out array. ' + valueIndex);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmatrixNextLevel.push(array[valueIndex]);\r\n\t\t\t\t\tvalueIndex++;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif (settings.push) settings.push(matrixNextLevel);\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\tconst nextlLevel = level + 1;\r\n\t\t\t\titeration (nextlLevel, matrixNextLevel);\r\n\r\n\t\t\t}\r\n\t\t\tif (!settings.push || settings.returnMatrix) matrixLevel.push(matrixNextLevel);\r\n\r\n\t\t}\r\n\t\t\r\n\t}\r\n\titeration (1, matrix);\r\n\treturn matrix;\r\n\r\n}\r\nWebGPU.gui = class {\r\n\r\n\t//* @param { GUI } fParent parent folder.\r\n\r\n\t/**\r\n\t * WebGPU gui\r\n\t * @param {Options} options See <b>options</b> parameter of <a href=\"../../myThree/jsdoc/module-MyThree-MyThree.html\" target=\"_blank\">MyThree</a> class.\r\n\t * @param {GUI} dat [dat.GUI()]{@link https://github.com/dataarts/dat.gui}.\r\n\t * @example new WebGPU.gui( options, dat );\r\n\t */\r\n\tconstructor(options, dat) {\r\n\r\n\t\tif ( !options.boOptions ) {\r\n\t\r\n\t\t\tconsole.error( 'WebGPU.gui: call options = new Options( options ) first' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\tconst gui = options.dat.gui;\r\n\t\tif ( !gui )\r\n\t\t\treturn;\r\n\t\t\r\n\t\t//Localization\r\n\r\n\t\tconst getLanguageCode = options.getLanguageCode;\r\n\r\n\t\tconst lang = {\r\n\r\n\t\t\twebGPU: 'WebGPU',\r\n\t\t\twebGPUTitle: 'WebGPU settings',\r\n\r\n\t\t};\r\n\r\n\t\tconst _languageCode = getLanguageCode();\r\n\r\n\t\tswitch (_languageCode) {\r\n\r\n\t\t\tcase 'ru'://Russian language\r\n\r\n\t\t\t\tlang.webGPUTitle = 'Настройки WebGPU';\r\n\r\n\t\t\t\tbreak;\r\n\t\t\tdefault://Custom language\r\n\t\t\t\tif ((guiParams.lang === undefined) || (guiParams.lang.languageCode != _languageCode))\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tObject.keys(guiParams.lang).forEach(function (key) {\r\n\r\n\t\t\t\t\tif (lang[key] === undefined)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tlang[key] = guiParams.lang[key];\r\n\r\n\t\t\t\t});\r\n\r\n\t\t}\r\n\t\tconst fParent = gui, fWebGPU = fParent.addFolder(lang.webGPU);\r\n\t\tdat.folderNameAndTitle(fWebGPU, lang.webGPU, lang.webGPUTitle);\r\nreturn;\t\t\r\n\r\n\t\tthis.object = function (object, dat) {\r\n\r\n\t\t\tvar display = 'none';\r\n\t\t\tif (object && object.userData.nd) {\r\n\r\n\t\t\t\tdisplay = 'block';\r\n\t\t\t\tobject.userData.nd(fND, dat);\r\n\r\n\t\t\t} else Object.keys(fND.__folders).forEach(key => {\r\n\r\n\t\t\t\tconst folder = fND.__folders[key];\r\n\t\t\t\tif (!folder.userData || (folder.userData.objectItems === undefined)) return;\r\n\t\t\t\tconst cSegment = folder.__controllers[0], selectedItem = 0;\r\n\t\t\t\tcSegment.__select.selectedIndex = selectedItem;\r\n\t\t\t\tcSegment.setValue(cSegment.__select[selectedItem].innerHTML);\r\n\r\n\r\n\t\t\t});\r\n\t\t\tfND.domElement.style.display = display;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default WebGPU;\r\n"],"names":["WebGPU","settings","gpuDevice","initializeWebGPU","isSupportWebGPU","error","gpuAdapter","navigator","gpu","requestAdapter","requestDevice","lost","then","info","message","reason","onWebGPUInitialized","input","bindGroupLayout","bindGroup","phase","param","max","matrices","forEach","inputMatrix","matrix","length","row","value","push","Float32Array","gpuBuffer","createBuffer","byteLength","GPUBufferUsage","STORAGE","getMappedRange","set","unmap","params","writeBuffer","item","type","paramBufferSize","data","keys","key","isInt","n","isInteger","Uint32Array","BYTES_PER_ELEMENT","console","paramBuffer","UNIFORM","COPY_DST","queue","results","result","i","out","undefined","resultMatrix","bufferSize","count","limits","maxBufferSize","buffer","COPY_SRC","entriesBindGroupLayout","entriesBindGroup","binding","GPUShaderStage","COMPUTE","createBindGroupLayout","entries","createBindGroup","shaderCode","onLoad","shaderCodeFile","response","ok","Error","url","statusText","status","text","catch","shaderCodeText","shaderModule","createShaderModule","code","computePipeline","createComputePipeline","createPipelineLayout","createCommandEncoder","commandEncoder","passEncoder","beginComputePass","setPipeline","setBindGroup","workgroupCount","Math","ceil","workgroupCountX","workgroupCountY","workgroupCountZ","dispatchWorkgroups","end","gpuReadBuffer","size","MAP_READ","copyBufferToBuffer","finish","submit","waitResult","mapAsync","GPUMapMode","READ","out2Matrix","array","valueIndex","dimension","iteration","level","matrixLevel","levelCount","matrixNextLevel","j","nextlLevel","returnMatrix","gui","options","dat","boOptions","getLanguageCode","lang","_languageCode","webGPUTitle","guiParams","languageCode","fParent","fWebGPU","addFolder","webGPU","folderNameAndTitle","object","display","userData","nd","fND","Object","__folders","folder","objectItems","cSegment","__controllers","selectedItem","__select","selectedIndex","setValue","innerHTML","domElement","style"],"mappings":"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"}