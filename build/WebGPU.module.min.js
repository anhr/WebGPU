class WebGPU{constructor(e){let r=null;!async function t(){if(!WebGPU.isSupportWebGPU())return void console.error("WebGPU: User agent doesn't support WebGPU. WebGPU is available for now in Chrome Canary https://www.google.com/intl/ru/chrome/canary/ on desktop behind an experimental flag. You can enable it at chrome://flags/#enable-unsafe-webgpu. The API is constantly changing and currently unsafe. As GPU sandboxing isn't implemented yet for the WebGPU API, it is possible to read GPU data for other processes! Don't browse the web with it enabled.");const a=await navigator.gpu.requestAdapter();if(!a)return console.error("No WebGPU adapters found."),!1;(r=await a.requestDevice()).lost.then(e=>{console.error(`WebGPU device was lost: ${e.message}`),r=null,"destroyed"!=e.reason&&t()}),function(){const t=e.input;let a,s;const o={param:0,max:0};if(t&&(t.matrices&&t.matrices.forEach(e=>{const t=[e.length,e[0].length];e.forEach(e=>e.forEach(e=>t.push(e))),e.matrix=new Float32Array(t),e.gpuBuffer=r.createBuffer({mappedAtCreation:!0,size:e.matrix.byteLength,usage:GPUBufferUsage.STORAGE}),new Float32Array(e.gpuBuffer.getMappedRange()).set(e.matrix),e.gpuBuffer.unmap()}),t.params)){function n(e,t){let a=0;const s=[];Object.keys(e).forEach(r=>{let o=e[r];if("number"==typeof o){const e=o%1==0;if(!e&&t===Uint32Array)return void console.error("WebGPU: Invalid "+r+" = "+o+" parameter type. "+(t===Uint32Array?"Integer":"Float")+" is allowed only.");a+=t.BYTES_PER_ELEMENT,s.push(o)}else console.error("WebGPU: Invalid param: "+o)}),e.paramBuffer=r.createBuffer({size:a,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),r.queue.writeBuffer(e.paramBuffer,0,new t(s)),e.data=s}Object.keys(t.params).forEach(e=>{switch(e){case"f32":n(t.params[e],Float32Array);break;case"u32":n(t.params[e],Uint32Array);break;default:console.error('WebGPU: Invalid input.params "'+e+'" key.')}})}e.results.forEach((e,r)=>{e.out?void 0!==e.phase&&e.phase>o.max&&(o.max=e.phase):console.error("WebGPU: settings.results["+r+"].out is undefined.")}),o.max>0&&(o.paramBuffer=r.createBuffer({size:Uint32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),r.queue.writeBuffer(o.paramBuffer,0,new Uint32Array([o.param]))),e.results&&e.results.forEach(e=>{void 0===e.type&&(e.type=Float32Array);const t=e.type.BYTES_PER_ELEMENT*e.count;t?r.limits.maxBufferSize<t?console.error("WebGPU: GPUDevice buffer size = "+t+" is limited to "+r.limits.maxBufferSize):e.buffer=r.createBuffer({size:t,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}):console.error('WebGPU: "count" key is not defined in the settings.results item.')});const u=[],i=[];let f=0;if(t){if(t.matrices)for(var c=0;c<t.matrices.length;c++)u.push({binding:f,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}),i.push({binding:f,resource:{buffer:t.matrices[c].gpuBuffer}}),f++;t.params&&Object.keys(t.params).forEach(e=>{switch(e){case"f32":case"u32":u.push({binding:f,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}),i.push({binding:f,resource:{buffer:t.params[e].paramBuffer}}),f++;break;default:console.error('WebGPU: Invalid input.params "'+e+'" key.')}})}e.results&&e.results.forEach(e=>{u.push({binding:f,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}),i.push({binding:f,resource:{buffer:e.buffer}}),f++}),o.max>0&&(u.push({binding:f,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}),i.push({binding:f,resource:{buffer:o.paramBuffer}}),f++),a=r.createBindGroupLayout({entries:u}),s=r.createBindGroup({layout:a,entries:i});const l=e.shaderCode;async function p(n){e.shaderCodeText&&(n=e.shaderCodeText(n));const u=r.createShaderModule({code:n}),i=r.createComputePipeline({layout:r.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:u,entryPoint:"main"}});function f(){const a=r.createCommandEncoder(),o=a.beginComputePass();o.setPipeline(i),o.setBindGroup(0,s);let n=[];t&&t.matrices?t.matrices.forEach((e,r)=>n.push(Math.ceil(e.matrix[r]/8))):e.workgroupCount?n=e.workgroupCount:n.push(1);const u=n[0],f=n[1],c=n[3];return o.dispatchWorkgroups(u,f,c),o.end(),e.results&&e.results.forEach(e=>{e.gpuReadBuffer=r.createBuffer({size:e.buffer.size,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),a.copyBufferToBuffer(e.buffer,0,e.gpuReadBuffer,0,e.buffer.size)}),a.finish()}if(r.queue.submit([f()]),e.results){async function c(r){const t=e.results[r];t.out?(t.phase||0)===o.param&&(await t.gpuReadBuffer.mapAsync(GPUMapMode.READ),t.out(t.gpuReadBuffer.getMappedRange())):console.error("WebGPU: settings.results["+r+"].out is undefined.")}for(;;){for(let r=0;r<e.results.length;r++)await c(r);if(o.param++,o.param>o.max)break;r.queue.writeBuffer(o.paramBuffer,0,new Uint32Array([o.param])),r.queue.submit([f()])}}}l?p(l):fetch(e.shaderCodeFile).then(e=>{if(!e.ok)throw new Error(`Load "${e.url}" ${e.statusText}. Status = ${e.status}`);return e.text()}).then(e=>{p(e)}).catch(e=>{console.error(e)})}()}()}}WebGPU.isSupportWebGPU=function(){return"gpu"in navigator},WebGPU.out2Matrix=function(e,r={}){const t=r.type?new r.type(e):new Float32Array(e),a=[];let s,o;const n=r.size;return n?(o=n.length,s=0):(o=t[0],s=o+1),function e(a,u){if(a>o)return;const i=n?n[a-1]:t[a];for(let f=0;f<i;f++){const i=[];if(a===o-1){const e=n?n[o-1]:t[o];for(let r=0;r<e;r++){if(s>=t.length)return void console.error("WebGPU.out2Matrix: out of the index range of the out array. "+s);i.push(t[s]),s++}r.push&&r.push(i)}else e(a+1,i);r.push&&!r.returnMatrix||u.push(i)}}(1,a),a},WebGPU.gui=class{constructor(e,r){if(!e.boOptions)return void console.error("WebGPU.gui: call options = new Options( options ) first");const t=e.dat.gui;if(!t)return;const a={webGPU:"WebGPU",webGPUTitle:"WebGPU settings"},s=(0,e.getLanguageCode)();switch(s){case"ru":a.webGPUTitle="Настройки WebGPU";break;default:if(void 0===guiParams.lang||guiParams.lang.languageCode!=s)break;Object.keys(guiParams.lang).forEach(function(e){void 0!==a[e]&&(a[e]=guiParams.lang[e])})}const o=t.addFolder(a.webGPU);r.folderNameAndTitle(o,a.webGPU,a.webGPUTitle)}};export default WebGPU;