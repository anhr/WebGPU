/**
 * @module WebGPU
 * @description WebGPU Compute.
 *
 * @author [Andrej Hristoliubov]{@link https://anhr.github.io/AboutMe/}
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 */
!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r(e.WebGPU={})}(this,function(e){"use strict";
/**
 * @module WebGPU
 * @description [WebGPU]{@link https://gpuweb.github.io/gpuweb/}. GPU Compute on the web.
 * @see [Get started with GPU Compute on the web]{@link https://web.dev/gpu-compute/}
 *
 * @author [Andrej Hristoliubov]{@link https://github.com/anhr}
 *
 * @copyright 2011 Data Arts Team, Google Creative Lab
 *
 * @license under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
*/class s{constructor(c){let l=null;!async function r(){if(s.isSupportWebGPU()){var e=await navigator.gpu.requestAdapter();if(!e)return console.error("No WebGPU adapters found."),!1;(l=await e.requestDevice()).lost.then(e=>{console.error("WebGPU device was lost: "+e.message),l=null,"destroyed"!=e.reason&&r()});{const i=c.input;let s,n;const f={param:0,max:0};function t(t,a){let s=0;const u=[];Object.keys(t).forEach(e=>{var r=t[e];"number"==typeof r?r%1==0||a!==Uint32Array?(s+=a.BYTES_PER_ELEMENT,u.push(r)):console.error("WebGPU: Invalid "+e+" = "+r+" parameter type. "+(a===Uint32Array?"Integer":"Float")+" is allowed only."):console.error("WebGPU: Invalid param: "+r)}),t.paramBuffer=l.createBuffer({size:s,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),l.queue.writeBuffer(t.paramBuffer,0,new a(u)),t.data=u}i&&(i.matrices&&i.matrices.forEach(e=>{const r=[e.length,e[0].length];e.forEach(e=>e.forEach(e=>r.push(e))),e.matrix=new Float32Array(r),e.gpuBuffer=l.createBuffer({mappedAtCreation:!0,size:e.matrix.byteLength,usage:GPUBufferUsage.STORAGE}),new Float32Array(e.gpuBuffer.getMappedRange()).set(e.matrix),e.gpuBuffer.unmap()}),i.params)&&Object.keys(i.params).forEach(e=>{switch(e){case"f32":t(i.params[e],Float32Array);break;case"u32":t(i.params[e],Uint32Array);break;default:console.error('WebGPU: Invalid input.params "'+e+'" key.')}}),c.results.forEach((e,r)=>{e.out?void 0!==e.phase&&e.phase>f.max&&(f.max=e.phase):console.error("WebGPU: settings.results["+r+"].out is undefined.")}),0<f.max&&(f.paramBuffer=l.createBuffer({size:Uint32Array.BYTES_PER_ELEMENT,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),l.queue.writeBuffer(f.paramBuffer,0,new Uint32Array([f.param]))),c.results&&c.results.forEach(e=>{void 0===e.type&&(e.type=Float32Array);var r=e.type.BYTES_PER_ELEMENT*e.count;r?l.limits.maxBufferSize<r?console.error("WebGPU: GPUDevice buffer size = "+r+" is limited to "+l.limits.maxBufferSize):e.buffer=l.createBuffer({size:r,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}):console.error('WebGPU: "count" key is not defined in the settings.results item.')});const o=[],p=[];let r=0;if(i){if(i.matrices)for(var a=0;a<i.matrices.length;a++)o.push({binding:r,visibility:GPUShaderStage.COMPUTE,buffer:{type:"read-only-storage"}}),p.push({binding:r,resource:{buffer:i.matrices[a].gpuBuffer}}),r++;i.params&&Object.keys(i.params).forEach(e=>{switch(e){case"f32":case"u32":o.push({binding:r,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}),p.push({binding:r,resource:{buffer:i.params[e].paramBuffer}}),r++;break;default:console.error('WebGPU: Invalid input.params "'+e+'" key.')}})}async function u(e){c.shaderCodeText&&(e=c.shaderCodeText(e));var r,t,e=l.createShaderModule({code:e});const o=l.createComputePipeline({layout:l.createPipelineLayout({bindGroupLayouts:[s]}),compute:{module:e,entryPoint:"main"}});function a(){const r=l.createCommandEncoder();var e=r.beginComputePass();e.setPipeline(o),e.setBindGroup(0,n);let t=[];i&&i.matrices?i.matrices.forEach((e,r)=>t.push(Math.ceil(e.matrix[r]/8))):c.workgroupCount?t=c.workgroupCount:t.push(1);var a=t[0],s=t[1],u=t[3];return e.dispatchWorkgroups(a,s,u),e.end(),c.results&&c.results.forEach(e=>{e.gpuReadBuffer=l.createBuffer({size:e.buffer.size,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),r.copyBufferToBuffer(e.buffer,0,e.gpuReadBuffer,0,e.buffer.size)}),r.finish()}if(l.queue.submit([a()]),c.results)for(;;){for(let e=0;e<c.results.length;e++)r=e,t=void 0,await((t=c.results[r]).out?(t.phase||0)!==f.param||(await t.gpuReadBuffer.mapAsync(GPUMapMode.READ),!t.out(t.gpuReadBuffer.getMappedRange())):!console.error("WebGPU: settings.results["+r+"].out is undefined."));if(f.param++,f.param>f.max)break;l.queue.writeBuffer(f.paramBuffer,0,new Uint32Array([f.param])),l.queue.submit([a()])}}c.results&&c.results.forEach(e=>{o.push({binding:r,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}),p.push({binding:r,resource:{buffer:e.buffer}}),r++}),0<f.max&&(o.push({binding:r,visibility:GPUShaderStage.COMPUTE,buffer:{type:"uniform"}}),p.push({binding:r,resource:{buffer:f.paramBuffer}}),r++),s=l.createBindGroupLayout({entries:o}),n=l.createBindGroup({layout:s,entries:p}),(e=c.shaderCode)?u(e):fetch(c.shaderCodeFile).then(e=>{if(e.ok)return e.text();throw new Error(`Load "${e.url}" ${e.statusText}. Status = `+e.status)}).then(e=>{u(e)}).catch(e=>{console.error(e)})}}else console.error("WebGPU: User agent doesn't support WebGPU. WebGPU is available for now in Chrome Canary https://www.google.com/intl/ru/chrome/canary/ on desktop behind an experimental flag. You can enable it at chrome://flags/#enable-unsafe-webgpu. The API is constantly changing and currently unsafe. As GPU sandboxing isn't implemented yet for the WebGPU API, it is possible to read GPU data for other processes! Don't browse the web with it enabled.")}()}}s.isSupportWebGPU=function(){return"gpu"in navigator},s.out2Matrix=function(e,n={}){const i=new(n.type||Float32Array)(e),r=[];let f,p;const c=n.size;return f=c?(p=c.length,0):(p=i[0])+1,function r(t,a){if(!(t>p)){var s=c?c[t-1]:i[t];for(let e=0;e<s;e++){var u=[];if(t===p-1){var o=c?c[p-1]:i[p];for(let e=0;e<o;e++){if(f>=i.length)return void console.error("WebGPU.out2Matrix: out of the index range of the out array. "+f);u.push(i[f]),f++}n.push&&n.push(u)}else r(t+1,u);n.push&&!n.returnMatrix||a.push(u)}}}(1,r),r},e.default=s,Object.defineProperty(e,"__esModule",{value:!0})});
